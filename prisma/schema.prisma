
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//////////////// ========= schema.prisma  ///////////////////

// ***** User ****** //
enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  PAUSED
  COMPLETED
  INACTIVE
}


// *** CHAT / Session ENUM Between student and teacher *** //
enum USERTYPE {
  STUDENT
  TEACHER
}


model Users {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  userId     String       @unique
  bio        String 
  questions  Json[]
  TopicsData UserDataForTopic[]
  sessions   Sessions[]
  role       String @default("USER")
  status     UserStatus @default(PENDING)
  nickname   String
}


model AdminUsers {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  userId     String       @unique
  role       String       @default("ADMIN")
  topics     Topic[]      @relation("AuthorOfTopics")
  name       String
  tutorAvailability Calendar[] @relation("AdminCalendar")
}


model Calendar {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  relatedTo   AdminUsers  @relation("AdminCalendar", fields: [relatedToId], references: [id])
  relatedToId String      @db.ObjectId
  availability Json       // Stores the weekly schedule as a JSON object
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Homework 
  // belongsTo: user
  // createdBy: Admin
  // name , set for, 
  // tasks, 


// how do i enforce uniquness here?
model Messages {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sender    USERTYPE
  text      String
  timestamp DateTime @default(now())
  studentId String    
  @@index([sender])
}


// ... Sessions between a Student and Teacher ... //

model ProposedSession {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    title      String
    date       DateTime
    length     Int
    studentId  String @unique
    proposer   USERTYPE
}

model Sessions {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    title      String
    date       DateTime
    length     Int
    student    Users    @relation(fields: [userId], references: [userId])
    userId     String   // Removed @unique constraint if a user can have multiple topics
    proposer   USERTYPE
    notes      Json 
    preSessionNotes Json 
}


// ... relations between a user and [ languages, Users ] //

model UserDataForTopic {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userNotes    Json
  userProgress Boolean   @default(false)
  user         Users     @relation(fields: [userId], references: [userId])
  userId       String    // Removed @unique constraint if a user can have multiple topics
  topic        Topic     @relation(fields: [topicId], references: [id])
  topicId      String    @db.ObjectId @unique
}


// ***** Tags ****** //

model Categories {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  color       String
  concepts    CategoriesConcept[]
  challenges  CategoriesChallenge[]
}

model Languages {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  color       String
  concepts    LanguagesTopic[]
  challenges  LanguagesChallenge[]
}


// ****** CONCEPTS & TOPIC ****** // 

model Concepts {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  topics      Topic[]   // Define a one-to-many relationship with the Topic model.
  active      Boolean
  imgUrl      String  @default("")
  categories  CategoriesConcept[]
  position    Int @unique
}


model Topic {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  concept     Concepts @relation(fields: [conceptId], references: [id], onDelete: Cascade ) 
  conceptId   String   @db.ObjectId
  active      Boolean 
  data        Json[]
  resources   Json[]
  languages   LanguagesTopic[]
  userDataOnCourse UserDataForTopic?
  position    Int @unique
  author      AdminUsers @relation("AuthorOfTopics", fields: [authorId], references: [id])
  authorId    String @db.ObjectId
  postedOn    DateTime  @default(now())
}


// ... relations between a category / topic and tags ... //

model CategoriesConcept {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  concept     Concepts     @relation(fields: [conceptId], references: [id], onDelete: Cascade )
  conceptId   String       @db.ObjectId
  category    Categories   @relation(fields: [categoryId], references: [id])
  categoryId  String       @db.ObjectId
}

model LanguagesTopic {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  course      Topic        @relation(fields: [topicId], references: [id])
  topicId     String       @db.ObjectId
  language    Languages    @relation(fields: [languageId], references: [id], onDelete: Cascade )
  languageId  String       @db.ObjectId
}


// ****** Challenges ****** //

model Challenges {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String 
  categories  CategoriesChallenge[]    
  languages   LanguagesChallenge[]    
  description Json[]  
  tasks       Json         
  notes       Json
  resources   Json[]
  active      Boolean      @default(true)
}

// ... relations between challenges and tags ... //

model CategoriesChallenge {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  challenge   Challenges   @relation(fields: [challengeId], references: [id], onDelete: Cascade )
  challengeId String       @db.ObjectId
  category    Categories   @relation(fields: [categoryId], references: [id])
  categoryId  String       @db.ObjectId
}

model LanguagesChallenge {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  challenge   Challenges   @relation(fields: [challengeId], references: [id])
  challengeId String       @db.ObjectId
  language    Languages    @relation(fields: [languageId], references: [id], onDelete: Cascade )
  languageId  String       @db.ObjectId
}

// **** Courses ***** //

// model Courses {
//   id          String       @id @default(auto()) @map("_id") @db.ObjectId
//   name        String
//   description String 
//   imgUrl      String  @default("")
//   data        Json[]
//   resources   Json[]
//   categories  CategoryCourse[]
//   languages   LanguagesCourse[]
//   active      Boolean
// }

// ... relations between course and tags ... //

// model CategoryCourse {
//   id          String       @id @default(auto()) @map("_id") @db.ObjectId
//   course      Courses      @relation(fields: [courseId], references: [id])
//   courseId    String       @db.ObjectId
//   category    Categories   @relation(fields: [categoryId], references: [id])
//   categoryId  String       @db.ObjectId
// }

// model LanguagesCourse {
//   id          String       @id @default(auto()) @map("_id") @db.ObjectId
//   course      Courses      @relation(fields: [courseId], references: [id])
//   courseId    String       @db.ObjectId
//   language    Languages    @relation(fields: [languageId], references: [id])
//   languageId  String       @db.ObjectId
// }